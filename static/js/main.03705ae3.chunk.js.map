{"version":3,"sources":["core/database.ts","model/Category.ts","converters/CategoryConverter.ts","store/CategoryStore.ts","model/Record.ts","converters/RecordConverter.ts","store/RecordStore.ts","components/Card.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","length","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","ref","Category","Object","classCallCheck","this","name","field1","value","field2","field3","field4","CategoryConverter","createClass","key","obj","cat","Field1","Field2","Field3","Field4","store","CategoryStore","_this","initializerDefineProperty","_descriptor","child","on","snap","_categories","val","map","c","push","convert","observable","window","cs","Record","category","RecordWithoutKey","record","RecordConverter","rec","RecordStore","RecordStore_descriptor","_descriptor2","_totalRecords","_recordFilter","_category","SaveOrUpdateRecord","NewRecord","console","log","trim","set","_NewRecord","getWholeRecords","_records","v","filter","f","includes","_totalRecordsByCategory","slice","_this2","orderByChild","keys","r","setFilteredRecords","_this3","equalTo","rs","Card","_React$Component","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","react_default","a","createElement","className","props","React","Component","App","observer","call","resetRecord","_record","handleCategoryChange","bind","assertThisInitialized","handleFilterChange","handleChange","handleAddSubmit","type","placeholder","aria-label","onChange","data-toggle","data-target","aria-controls","aria-expanded","id","Categories","role","Records","i","Card_Card","data-dismiss","onSubmit","htmlFor","readOnly","defaultValue","event","target","RecordFilter","$","modal","preventDefault","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03705ae3.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyB8A0AUkFGdojOsckgi4URP0pGDAL64zOU\",\r\n    authDomain: \"medical-ref-app.firebaseapp.com\",\r\n    databaseURL: \"https://medical-ref-app.firebaseio.com\",\r\n    projectId: \"medical-ref-app\",\r\n    storageBucket: \"medical-ref-app.appspot.com\",\r\n    messagingSenderId: \"1031848480203\"\r\n  };\r\n\r\n  \r\n  if (!firebase.apps.length) {\r\n    firebase.initializeApp(config);\r\n  }\r\n\r\n  export const db = firebase.database().ref();\r\n","\r\n\r\nexport class Category implements ICategory {\r\n    name: string;\r\n    field1: IField;\r\n    field2: IField;\r\n    field3: IField;\r\n    field4: IField;\r\n\r\n    constructor() {\r\n        this.name = '';\r\n        this.field1 = { name: '', value: '' };\r\n        this.field2 = { name: '', value: '' };\r\n        this.field3 = { name: '', value: '' };\r\n        this.field4 = { name: '', value: '' };\r\n    }\r\n}","import { Category } from \"../model/Category\";\r\n\r\nexport class CategoryConverter {\r\n    public static convert(obj:any):ICategory {\r\n        let cat = new Category();\r\n        if(obj){\r\n            cat.name = obj.name;\r\n            cat.field1 = { name:'Field1', value : obj.Field1 };\r\n            cat.field2 = { name:'Field2', value : obj.Field2 };\r\n            cat.field3 = { name:'Field3', value : obj.Field3 };\r\n            cat.field4 = { name:'Field4', value : obj.Field4 };\r\n        }\r\n        return cat;\r\n    }\r\n}","import { Category } from \"../model/Category\";\r\nimport { observable, computed } from 'mobx'\r\nimport { db } from \"../core/database\";\r\nimport { CategoryConverter } from \"../converters/CategoryConverter\";\r\n\r\nclass CategoryStore {\r\n    @observable _categories: ICategory[] = [];\r\n\r\n    get Categories(): Category[] {\r\n        return this._categories;\r\n    }\r\n\r\n    constructor() {\r\n        db.child('Master/category').on('value', snap => {\r\n            if (snap) {\r\n                this._categories = [];\r\n                snap.val().map((c) => {\r\n                    this._categories.push(CategoryConverter.convert(c));\r\n                });\r\n            }\r\n\r\n        });\r\n    }\r\n}\r\nvar store = new CategoryStore();\r\n(<any>window).cs = store;\r\nexport default store;","export class Record {\r\n    category: string = '';\r\n    Field1: string = '';\r\n    Field2: string = '';\r\n    Field3: string = '';\r\n    Field4: string = '';\r\n    key: string = '';\r\n}\r\n\r\nexport class RecordWithoutKey {\r\n    category: string = '';\r\n    Field1: string = '';\r\n    Field2: string = '';\r\n    Field3: string = '';\r\n    Field4: string = '';\r\n\r\n    constructor(record: Record) {\r\n        this.category = record.category;\r\n        this.Field1 = record.Field1;\r\n        this.Field2 = record.Field2;\r\n        this.Field3 = record.Field3;\r\n        this.Field4 = record.Field4;\r\n    }\r\n}","import { Record } from \"../model/Record\";\r\n\r\nexport class RecordConverter {\r\n    public static convert(obj: any, key:string): Record {\r\n        let rec = new Record();\r\n        if(obj){\r\n            rec.category = obj.category;\r\n            rec.Field1 = obj.Field1;\r\n            rec.Field2 = obj.Field2;\r\n            rec.Field3 = obj.Field3;\r\n            rec.Field4 = obj.Field4;\r\n            rec.key = key;\r\n        }\r\n        return rec;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport { db } from \"../core/database\";\r\nimport { Record, RecordWithoutKey } from '../model/Record';\r\nimport { RecordConverter } from '../converters/RecordConverter';\r\n\r\nclass RecordStore {\r\n    @observable _records: Record[] = [];\r\n    @observable _totalRecordsByCategory: Record[] = [];\r\n    _totalRecords: Record[] = [];\r\n    _recordFilter: string = '';\r\n    _category: string = '';\r\n\r\n    get Records(): Record[] {\r\n        return this._records;\r\n    }\r\n\r\n    @observable\r\n    private _NewRecord: Record;\r\n    public get NewRecord(): Record {\r\n        return this._NewRecord;\r\n    }\r\n    public set NewRecord(v: Record) {\r\n        this._NewRecord = v;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        this._NewRecord = new Record();\r\n        this.getWholeRecords();\r\n    }\r\n\r\n    public set Category(category: string) {\r\n        this._category = category;\r\n        db.child('Records').orderByChild('category').equalTo(category).on('value', snap => {\r\n            if (snap) {\r\n                this._totalRecordsByCategory = [];\r\n                if (snap.val()) {\r\n                    Object.keys(snap.val()).map(r => {\r\n                        console.log(snap.val()[r], r);\r\n                        this._totalRecordsByCategory.push(RecordConverter.convert(snap.val()[r], r));\r\n                    });\r\n                }\r\n                this.setFilteredRecords(this._recordFilter);\r\n            }\r\n        })\r\n    }\r\n    public get Category(): string {\r\n        return this._category;\r\n    }\r\n\r\n    setFilteredRecords(filter: string): void {\r\n        if (filter && filter.trim() != '') {\r\n            if (this.Category.trim() == '') {\r\n                this._records = this._totalRecords.filter(f => {\r\n                    return f.Field1.includes(filter) ||\r\n                        f.Field2.includes(filter) ||\r\n                        f.Field3.includes(filter) ||\r\n                        f.Field4.includes(filter);\r\n                });\r\n            } else {\r\n                this._records = this._totalRecordsByCategory.filter(f => {\r\n                    return f.Field1.includes(filter) ||\r\n                        f.Field2.includes(filter) ||\r\n                        f.Field3.includes(filter) ||\r\n                        f.Field4.includes(filter);\r\n                });\r\n            }\r\n        } else {\r\n            this._records = this._totalRecordsByCategory.slice();\r\n        }\r\n    }\r\n\r\n    getWholeRecords():void {\r\n        db.child('Records').orderByChild('category').on('value', snap => {\r\n            if (snap) {\r\n                this._totalRecords = [];\r\n                if (snap.val()) {\r\n                    Object.keys(snap.val()).map(r => {\r\n                        console.log(snap.val()[r], r);\r\n                        this._totalRecords.push(RecordConverter.convert(snap.val()[r], r));\r\n                    });\r\n                }\r\n                this.setFilteredRecords(this._recordFilter);\r\n            }\r\n        })\r\n    }\r\n\r\n    public set RecordFilter(filter: string) {\r\n        this._recordFilter = filter;\r\n        this.setFilteredRecords(filter);\r\n    }\r\n\r\n    public SaveOrUpdateRecord = () => {\r\n        if (this.NewRecord) {\r\n            console.log(this.NewRecord);\r\n            if (this.NewRecord.key.trim() != '') {\r\n                db.child('Records/' + this.NewRecord.key).set(new RecordWithoutKey(this.NewRecord));\r\n            }\r\n            else {\r\n                db.child('Records').push(new RecordWithoutKey(this.NewRecord));\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvar store = new RecordStore();\r\n(<any>window).rs = store;\r\nexport default store;","import React from \"react\";\r\nimport { Record } from '../model/Record'\r\n\r\ninterface ICardProp {\r\n    record: Record;\r\n}\r\n\r\nexport class Card extends React.Component<ICardProp> {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <p className=\"card-text\">{this.props.record.category}</p>\r\n                <p className=\"card-text\">{this.props.record.Field1}</p>\r\n                <p className=\"card-text\">{this.props.record.Field2}</p>\r\n                <p className=\"card-text\">{this.props.record.Field3}</p>\r\n                <p className=\"card-text\">{this.props.record.Field4}</p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport CategoryStore from './store/CategoryStore';\nimport RecordStore from './store/RecordStore';\nimport { observer } from 'mobx-react';\nimport { Card } from './components/Card';\nimport { Record } from './model/Record';\nimport { CardDetail } from './components/CardDetail';\n\ninterface IAppState {\n  filterText?: string;\n  record?: Record;\n}\ndeclare var $:any;\n\n@observer\nclass App extends Component<any, IAppState> {\n\n  private _record:Record;\n\n  constructor(props: any) {\n    super(props);\n\n    this.handleCategoryChange = this.handleCategoryChange.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    \n    this.handleAddSubmit = this.handleAddSubmit.bind(this);\n\n    this.resetRecord();\n  }\n\n  resetRecord =()=>{\n    this._record = new Record();\n\n    this._record.key = \"\";\n    this._record.category = \"\";\n    \n    this._record.Field1 = \"\";\n    this._record.Field2 = \"\";\n    this._record.Field3 = \"\";\n    this._record.Field4 = \"\";\n  }\n\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-light bg-light navbar-expand-md\">\n          <span className=\"navbar-brand mb-0 h1\">Ray's App</span>\n          <input className=\"form-control ml-auto w-50\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" onChange={this.handleFilterChange}></input>\n          <button className=\"navbar-toggler ml-2\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarToggleExternalContent\" aria-controls=\"navbarToggleExternalContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarToggleExternalContent\">\n            <select id=\"selCategory\" className=\"form-control ml-2\" onChange={this.handleCategoryChange}>\n              <option>Select</option>\n              {CategoryStore.Categories.map(c => <option key={c.name} value={c.name}>{c.name}</option>)}\n            </select>\n            <button type=\"button\" className=\"form-control btn btn-outline-primary btn-block ml-2\" data-toggle=\"modal\" data-target=\"#addModal\">Add</button>\n          </div>\n        </nav>\n\n        <main role=\"main\" className=\"container\">\n          <div className=\"card-deck\">\n            {RecordStore.Records.map((r, i) => <Card key={r.key} record={r}></Card>)}\n          </div>\n\n          <div className=\"modal\" id=\"addModal\">\n            <div className=\"modal-dialog modal-dialog-centered\">\n              <div className=\"modal-content\">\n\n\n                <div className=\"modal-header\">\n                  <h4 className=\"modal-title\">Add</h4>\n                  <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\n                </div>\n\n                <form onSubmit={this.handleAddSubmit}>\n                  <div className=\"modal-body\">\n                  <div className=\"form-group\">\n                      <label htmlFor=\"txtCategory\">Category</label>\n                      <input type=\"text\" className=\"form-control\" readOnly id=\"txtCategory\" name=\"Category\" defaultValue={RecordStore.Category}></input>\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"txtField1\">Field1</label>\n                      <input type=\"text\" className=\"form-control\" id=\"txtField1\" name=\"Field1\" defaultValue={this._record.Field1} onChange={this.handleChange}></input>\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"txtField2\">Field2</label>\n                      <input type=\"text\" className=\"form-control\" id=\"txtField2\" name=\"Field2\" defaultValue={this._record.Field2} onChange={this.handleChange}></input>\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"txtField3\">Field3</label>\n                      <input type=\"text\" className=\"form-control\" id=\"txtField3\" name=\"Field3\" defaultValue={this._record.Field3} onChange={this.handleChange}></input>\n                    </div>\n                    <div className=\"form-group\">\n                      <label htmlFor=\"txtField4\">Field4</label>\n                      <input type=\"text\" className=\"form-control\" id=\"txtField4\" name=\"Field4\" defaultValue={this._record.Field4} onChange={this.handleChange}></input>\n                    </div>\n                  </div>\n\n                  <div className=\"modal-footer\">\n                    <button type=\"submit\" className=\"btn btn-primary btn-outline-success\">Save</button>\n                    <button type=\"button\" className=\"btn btn-outline-danger\" data-dismiss=\"modal\">Close</button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  handleFilterChange(event: any): void {\n    if (event && event.target) {\n      // this.setState({filterText:event.target.value});\n      RecordStore.RecordFilter = event.target.value;\n    }\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this._record[name] = value;\n}\n\n  handleCategoryChange(event: any): void {\n    if (event && event.target) {\n      RecordStore.Category = event.target.value;\n    }\n  }\n\n  handleAddSubmit(event) {\n    this._record.key =\"\";\n    this._record.category = RecordStore.Category;\n    \n    RecordStore.NewRecord = this._record;\n    \n    RecordStore.SaveOrUpdateRecord();\n    $('#addModal').modal('toggle');\n    this.resetRecord();\n    event.preventDefault();\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
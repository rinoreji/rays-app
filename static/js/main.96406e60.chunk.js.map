{"version":3,"sources":["core/database.ts","model/Category.ts","converters/CategoryConverter.ts","store/CategoryStore.ts","model/Record.ts","converters/RecordConverter.ts","store/RecordStore.ts","components/Card.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","length","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","ref","Category","Object","classCallCheck","this","name","field1","value","field2","field3","field4","CategoryConverter","createClass","key","obj","cat","Field1","Field2","Field3","Field4","store","CategoryStore","_this","initializerDefineProperty","_descriptor","child","on","snap","_categories","val","map","c","push","convert","observable","window","cs","Record","category","RecordWithoutKey","record","RecordConverter","rec","RecordStore","RecordStore_descriptor","_descriptor2","_recordFilter","_category","SaveOrUpdateRecord","NewRecord","trim","set","_NewRecord","_records","v","filter","_totalRecords","f","includes","slice","_this2","orderByChild","equalTo","keys","r","console","log","setFilteredRecords","rs","Card","_React$Component","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","react_default","a","createElement","className","props","React","Component","App","observer","call","handleCategoryChange","bind","assertThisInitialized","handleFilterChange","handleFieldChange","add","type","placeholder","aria-label","data-toggle","data-target","aria-controls","aria-expanded","id","onChange","Categories","role","Records","i","Card_Card","event","target","RecordFilter","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96406e60.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyB8A0AUkFGdojOsckgi4URP0pGDAL64zOU\",\r\n    authDomain: \"medical-ref-app.firebaseapp.com\",\r\n    databaseURL: \"https://medical-ref-app.firebaseio.com\",\r\n    projectId: \"medical-ref-app\",\r\n    storageBucket: \"medical-ref-app.appspot.com\",\r\n    messagingSenderId: \"1031848480203\"\r\n  };\r\n\r\n  \r\n  if (!firebase.apps.length) {\r\n    firebase.initializeApp(config);\r\n  }\r\n\r\n  export const db = firebase.database().ref();\r\n","\r\n\r\nexport class Category implements ICategory {\r\n    name: string;\r\n    field1: IField;\r\n    field2: IField;\r\n    field3: IField;\r\n    field4: IField;\r\n\r\n    constructor() {\r\n        this.name = '';\r\n        this.field1 = { name: '', value: '' };\r\n        this.field2 = { name: '', value: '' };\r\n        this.field3 = { name: '', value: '' };\r\n        this.field4 = { name: '', value: '' };\r\n    }\r\n}","import { Category } from \"../model/Category\";\r\n\r\nexport class CategoryConverter {\r\n    public static convert(obj:any):ICategory {\r\n        let cat = new Category();\r\n        if(obj){\r\n            cat.name = obj.name;\r\n            cat.field1 = { name:'Field1', value : obj.Field1 };\r\n            cat.field2 = { name:'Field2', value : obj.Field2 };\r\n            cat.field3 = { name:'Field3', value : obj.Field3 };\r\n            cat.field4 = { name:'Field4', value : obj.Field4 };\r\n        }\r\n        return cat;\r\n    }\r\n}","import { Category } from \"../model/Category\";\r\nimport { observable, computed } from 'mobx'\r\nimport { db } from \"../core/database\";\r\nimport { CategoryConverter } from \"../converters/CategoryConverter\";\r\n\r\nclass CategoryStore {\r\n    @observable _categories: ICategory[] = [];\r\n\r\n    get Categories(): Category[] {\r\n        return this._categories;\r\n    }\r\n\r\n    constructor() {\r\n        db.child('Master/category').on('value', snap => {\r\n            if (snap) {\r\n                this._categories = [];\r\n                snap.val().map((c) => {\r\n                    this._categories.push(CategoryConverter.convert(c));\r\n                });\r\n            }\r\n\r\n        });\r\n    }\r\n}\r\nvar store = new CategoryStore();\r\n(<any>window).cs = store;\r\nexport default store;","export class Record {\r\n    category: string = '';\r\n    Field1: string = '';\r\n    Field2: string = '';\r\n    Field3: string = '';\r\n    Field4: string = '';\r\n    key: string = '';\r\n}\r\n\r\nexport class RecordWithoutKey {\r\n    category: string = '';\r\n    Field1: string = '';\r\n    Field2: string = '';\r\n    Field3: string = '';\r\n    Field4: string = '';\r\n\r\n    constructor(record: Record) {\r\n        this.category = record.category;\r\n        this.Field1 = record.Field1;\r\n        this.Field2 = record.Field2;\r\n        this.Field3 = record.Field3;\r\n        this.Field4 = record.Field4;\r\n    }\r\n}","import { Record } from \"../model/Record\";\r\n\r\nexport class RecordConverter {\r\n    public static convert(obj: any, key:string): Record {\r\n        let rec = new Record();\r\n        if(obj){\r\n            rec.category = obj.category;\r\n            rec.Field1 = obj.Field1;\r\n            rec.Field2 = obj.Field2;\r\n            rec.Field3 = obj.Field3;\r\n            rec.Field4 = obj.Field4;\r\n            rec.key = key;\r\n        }\r\n        return rec;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport { db } from \"../core/database\";\r\nimport { Record, RecordWithoutKey } from '../model/Record';\r\nimport { RecordConverter } from '../converters/RecordConverter';\r\n\r\nclass RecordStore {\r\n    @observable _records: Record[] = [];\r\n    @observable _totalRecords: Record[] = [];\r\n    _recordFilter: string = '';\r\n    _category: string = '';\r\n\r\n    get Records(): Record[] {\r\n        return this._records;\r\n    }\r\n\r\n    @observable\r\n    private _NewRecord : Record;\r\n    public get NewRecord() : Record {\r\n        return this._NewRecord;\r\n    }\r\n    public set NewRecord(v : Record) {\r\n        this._NewRecord = v;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        this._NewRecord = new Record();\r\n    }\r\n\r\n    public set Category(category: string) {\r\n        this._category = category;\r\n        db.child('Records').orderByChild('category').equalTo(category).on('value', snap => {\r\n            if (snap) {\r\n                this._totalRecords = [];\r\n                if (snap.val()) {\r\n                    Object.keys(snap.val()).map(r => {\r\n                        console.log(snap.val()[r], r);\r\n                        this._totalRecords.push(RecordConverter.convert(snap.val()[r], r));\r\n                    });\r\n                }\r\n                this.setFilteredRecords(this._recordFilter);\r\n            }\r\n        })\r\n    }\r\n\r\n    setFilteredRecords(filter: string): void {\r\n        if (filter && filter.trim() != '') {\r\n            this._records = this._totalRecords.filter(f => {\r\n                return f.Field1.includes(filter) ||\r\n                    f.Field2.includes(filter) ||\r\n                    f.Field3.includes(filter) ||\r\n                    f.Field4.includes(filter);\r\n            });\r\n        } else {\r\n            this._records = this._totalRecords.slice();\r\n        }\r\n    }\r\n\r\n    public set RecordFilter(filter: string) {\r\n        this._recordFilter = filter;\r\n        this.setFilteredRecords(filter);\r\n    }\r\n\r\n    public SaveOrUpdateRecord = ()=>{\r\n        debugger;\r\n        if(this.NewRecord){\r\n            if(this.NewRecord.key.trim() != ''){\r\n                db.child('Records/'+this.NewRecord.key).set(new RecordWithoutKey(this.NewRecord));\r\n            }\r\n            else{\r\n                db.child('Records').push(new RecordWithoutKey(this.NewRecord));\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvar store = new RecordStore();\r\n(<any>window).rs = store;\r\nexport default store;","import React from \"react\";\r\nimport { Record } from '../model/Record'\r\n\r\ninterface ICardProp {\r\n    record: Record;\r\n}\r\n\r\nexport class Card extends React.Component<ICardProp> {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <p className=\"card-text\">{this.props.record.category}</p>\r\n                <p className=\"card-text\">{this.props.record.Field1}</p>\r\n                <p className=\"card-text\">{this.props.record.Field2}</p>\r\n                <p className=\"card-text\">{this.props.record.Field3}</p>\r\n                <p className=\"card-text\">{this.props.record.Field4}</p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport CategoryStore from './store/CategoryStore';\nimport RecordStore from './store/RecordStore';\nimport { observer } from 'mobx-react';\nimport { Card } from './components/Card';\nimport { Record } from './model/Record';\nimport { CardDetail } from './components/CardDetail';\n\ninterface IAppState {\n  filterText?: string;\n  record?: Record;\n}\n\n@observer\nclass App extends Component<any, IAppState> {\n\n  constructor(props: any) {\n    super(props);\n\n    this.handleCategoryChange = this.handleCategoryChange.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.handleFieldChange = this.handleFieldChange.bind(this);\n    this.add = this.add.bind(this);\n  }\n\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-light bg-light navbar-expand-md\">\n          <span className=\"navbar-brand mb-0 h1\">Ray's App</span>\n          {/* <form className=\"form-inline\"> */}\n            <input className=\"form-control ml-auto w-50\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"></input>\n          {/* </form> */}\n          <button className=\"navbar-toggler ml-2\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarToggleExternalContent\" aria-controls=\"navbarToggleExternalContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarToggleExternalContent\">\n              <select id=\"selCategory\" className=\"form-control ml-2\" onChange={this.handleCategoryChange}>\n                {CategoryStore.Categories.map(c => <option key={c.name} value={c.name}>{c.name}</option>)}\n              </select>\n              <button type=\"button\" className=\"form-control btn btn-outline-primary btn-block ml-2\">Add</button>\n            </div>\n        </nav>\n        {/* \n        <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\n          <div className=\"row\">\n            <div className=\"col-auto\">\n              <a className=\"navbar-brand\" href=\"#\">Ray's App</a>\n            </div>\n            <div className=\"col-auto\">\n              <input className=\"form-control\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" onChange={this.handleFilterChange}></input>\n            </div>\n            <div className=\"col\">\n              <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n              </button>\n            </div>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\n              <div className=\"col-auto\">\n                <select id=\"selCategory\" className=\"form-control\" onChange={this.handleCategoryChange}>\n                  {CategoryStore.Categories.map(c => <option key={c.name} value={c.name}>{c.name}</option>)}\n                </select>\n              </div>\n              <div className=\"col-auto\">\n                <a className=\"nav-link\" href=\"#\">Add</a>\n              </div>\n            </div>\n\n          </div>\n        </nav> */}\n\n        <main role=\"main\" className=\"container\">\n          <div className=\"card-deck\">\n            {RecordStore.Records.map((r, i) => <Card key={r.key} record={r}></Card>)}\n          </div>\n        </main>\n      </div>\n      // <div className=\"App\">\n      //   <header className=\"App-header\">\n      //     <select onChange={this.handleCategoryChange}>\n      //       {CategoryStore.Categories.map(c => <option key={c.name} value={c.name}>{c.name}</option>)}\n      //     </select>\n      //     Filter: <input type=\"text\" onChange={this.handleFilterChange}></input>\n      //     <br/>\n      //     Field1: <input type=\"text\" onChange={this.handleFieldChange}></input>\n      //     <button onClick={this.add}> Add </button>\n      //   </header>\n\n      //   <div className=\"card-deck\">\n      //     {RecordStore.Records.map((r, i) => <Card key={r.key} record={r}></Card>)}\n      //   </div>\n      // </div>\n    );\n  }\n\n  handleFilterChange(event: any): void {\n    if (event && event.target) {\n      // this.setState({filterText:event.target.value});\n      RecordStore.RecordFilter = event.target.value;\n    }\n  }\n\n  handleFieldChange(event: any): void {\n    if (event && event.target) {\n      // this.setState({filterText:event.target.value});\n      RecordStore.NewRecord = new Record();\n      RecordStore.NewRecord.Field1 = event.target.value;\n    }\n  }\n\n  handleCategoryChange(event: any): void {\n    if (event && event.target) {\n      RecordStore.Category = event.target.value;\n    }\n  }\n\n  add(): void {\n    RecordStore.SaveOrUpdateRecord();\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
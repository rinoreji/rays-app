{"version":3,"sources":["serviceWorker.ts","core/database.ts","model/Category.ts","converters/CategoryConverter.ts","store/CategoryStore.ts","model/Record.ts","converters/RecordConverter.ts","store/RecordStore.ts","components/Card.tsx","components/Home.tsx","components/AddCard.tsx","components/Main.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","firebase","length","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","ref","Category","Object","classCallCheck","this","name","field1","value","field2","field3","field4","CategoryConverter","createClass","key","obj","cat","Field1","Field2","Field3","Field4","store","CategoryStore","_this","initializerDefineProperty","_descriptor","child","on","snap","_categories","val","map","c","push","convert","observable","cs","Record","category","RecordWithoutKey","record","RecordConverter","rec","RecordStore","RecordStore_descriptor","_descriptor2","_totalRecords","_recordFilter","_category","SaveOrUpdateRecord","NewRecord","trim","set","_NewRecord","getWholeRecords","_records","v","filter","f","includes","_totalRecordsByCategory","slice","_this2","orderByChild","keys","r","setFilteredRecords","find","_this3","equalTo","rs","Card","_React$Component","props","possibleConstructorReturn","getPrototypeOf","call","inherits","react_default","a","createElement","className","Link","to","React","Component","Home","observer","handleCategoryChange","bind","assertThisInitialized","handleFilterChange","react","type","placeholder","aria-label","onChange","data-toggle","data-target","aria-controls","aria-expanded","id","Categories","role","Records","i","Card_Card","event","target","RecordFilter","AddCard","CloseButton","withRouter","_ref","history","onClick","resetRecord","handleAddSubmit","handleChange","params","_record","getRecordByKey","alert","preventDefault","onSubmit","htmlFor","defaultValue","Main","Route","exact","path","component","ReactDOM","render","HashRouter","Main_Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4f514ad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyB8A0AUkFGdojOsckgi4URP0pGDAL64zOU\",\r\n    authDomain: \"medical-ref-app.firebaseapp.com\",\r\n    databaseURL: \"https://medical-ref-app.firebaseio.com\",\r\n    projectId: \"medical-ref-app\",\r\n    storageBucket: \"medical-ref-app.appspot.com\",\r\n    messagingSenderId: \"1031848480203\"\r\n  };\r\n\r\n  \r\n  if (!firebase.apps.length) {\r\n    firebase.initializeApp(config);\r\n  }\r\n\r\n  export const db = firebase.database().ref();\r\n","\r\n\r\nexport class Category implements ICategory {\r\n    name: string;\r\n    field1: IField;\r\n    field2: IField;\r\n    field3: IField;\r\n    field4: IField;\r\n\r\n    constructor() {\r\n        this.name = '';\r\n        this.field1 = { name: '', value: '' };\r\n        this.field2 = { name: '', value: '' };\r\n        this.field3 = { name: '', value: '' };\r\n        this.field4 = { name: '', value: '' };\r\n    }\r\n}","import { Category } from \"../model/Category\";\r\n\r\nexport class CategoryConverter {\r\n    public static convert(obj:any):ICategory {\r\n        let cat = new Category();\r\n        if(obj){\r\n            cat.name = obj.name;\r\n            cat.field1 = { name:'Field1', value : obj.Field1 };\r\n            cat.field2 = { name:'Field2', value : obj.Field2 };\r\n            cat.field3 = { name:'Field3', value : obj.Field3 };\r\n            cat.field4 = { name:'Field4', value : obj.Field4 };\r\n        }\r\n        return cat;\r\n    }\r\n}","import { Category } from \"../model/Category\";\r\nimport { observable, computed } from 'mobx'\r\nimport { db } from \"../core/database\";\r\nimport { CategoryConverter } from \"../converters/CategoryConverter\";\r\n\r\nclass CategoryStore {\r\n    @observable _categories: ICategory[] = [];\r\n\r\n    get Categories(): Category[] {\r\n        return this._categories;\r\n    }\r\n\r\n    constructor() {\r\n        db.child('Master/category').on('value', snap => {\r\n            if (snap) {\r\n                this._categories = [];\r\n                snap.val().map((c) => {\r\n                    this._categories.push(CategoryConverter.convert(c));\r\n                });\r\n            }\r\n\r\n        });\r\n    }\r\n}\r\nvar store = new CategoryStore();\r\n(<any>window).cs = store;\r\nexport default store;","export class Record {\r\n    category: string = '';\r\n    Field1: string = '';\r\n    Field2: string = '';\r\n    Field3: string = '';\r\n    Field4: string = '';\r\n    key: string = '';\r\n}\r\n\r\nexport class RecordWithoutKey {\r\n    category: string = '';\r\n    Field1: string = '';\r\n    Field2: string = '';\r\n    Field3: string = '';\r\n    Field4: string = '';\r\n\r\n    constructor(record: Record) {\r\n        this.category = record.category;\r\n        this.Field1 = record.Field1;\r\n        this.Field2 = record.Field2;\r\n        this.Field3 = record.Field3;\r\n        this.Field4 = record.Field4;\r\n    }\r\n}","import { Record } from \"../model/Record\";\r\n\r\nexport class RecordConverter {\r\n    public static convert(obj: any, key:string): Record {\r\n        let rec = new Record();\r\n        if(obj){\r\n            rec.category = obj.category;\r\n            rec.Field1 = obj.Field1;\r\n            rec.Field2 = obj.Field2;\r\n            rec.Field3 = obj.Field3;\r\n            rec.Field4 = obj.Field4;\r\n            rec.key = key;\r\n        }\r\n        return rec;\r\n    }\r\n}","import { observable, computed } from 'mobx'\r\nimport { db } from \"../core/database\";\r\nimport { Record, RecordWithoutKey } from '../model/Record';\r\nimport { RecordConverter } from '../converters/RecordConverter';\r\n\r\nclass RecordStore {\r\n    @observable _records: Record[] = [];\r\n    @observable _totalRecordsByCategory: Record[] = [];\r\n    _totalRecords: Record[] = [];\r\n    _recordFilter: string = '';\r\n    _category: string = '';\r\n\r\n    get Records(): Record[] {\r\n        return this._records;\r\n    }\r\n\r\n    @observable\r\n    private _NewRecord: Record;\r\n    public get NewRecord(): Record {\r\n        return this._NewRecord;\r\n    }\r\n    public set NewRecord(v: Record) {\r\n        this._NewRecord = v;\r\n    }\r\n\r\n    constructor() {\r\n        this._NewRecord = new Record();\r\n        this.getWholeRecords();\r\n    }\r\n\r\n    public set Category(category: string) {\r\n        this._category = category;\r\n        db.child('Records').orderByChild('category').equalTo(category).on('value', snap => {\r\n            if (snap) {\r\n                this._totalRecordsByCategory = [];\r\n                if (snap.val()) {\r\n                    Object.keys(snap.val()).map(r => {\r\n                        this._totalRecordsByCategory.push(RecordConverter.convert(snap.val()[r], r));\r\n                    });\r\n                }\r\n                this.setFilteredRecords(this._recordFilter);\r\n            }\r\n        })\r\n    }\r\n    public get Category(): string {\r\n        return this._category;\r\n    }\r\n\r\n    setFilteredRecords(filter: string): void {\r\n        if (filter && filter.trim() != '') {\r\n            if (this.Category.trim() == '') {\r\n                this._records = this._totalRecords.filter(f => {\r\n                    return f.Field1.includes(filter) ||\r\n                        f.Field2.includes(filter) ||\r\n                        f.Field3.includes(filter) ||\r\n                        f.Field4.includes(filter);\r\n                });\r\n            } else {\r\n                this._records = this._totalRecordsByCategory.filter(f => {\r\n                    return f.Field1.includes(filter) ||\r\n                        f.Field2.includes(filter) ||\r\n                        f.Field3.includes(filter) ||\r\n                        f.Field4.includes(filter);\r\n                });\r\n            }\r\n        } else {\r\n            this._records = this._totalRecordsByCategory.slice();\r\n        }\r\n    }\r\n\r\n    getWholeRecords(): void {\r\n        db.child('Records').orderByChild('category').on('value', snap => {\r\n            if (snap) {\r\n                this._totalRecords = [];\r\n                if (snap.val()) {\r\n                    Object.keys(snap.val()).map(r => {\r\n                        this._totalRecords.push(RecordConverter.convert(snap.val()[r], r));\r\n                    });\r\n                }\r\n                this.setFilteredRecords(this._recordFilter);\r\n            }\r\n        })\r\n    }\r\n\r\n    getRecordByKey(key: string): Record {\r\n        if (this._totalRecords && this._totalRecords.length > 0) {\r\n            return this._totalRecords.find((r) => r.key == key);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    public set RecordFilter(filter: string) {\r\n        this._recordFilter = filter;\r\n        this.setFilteredRecords(filter);\r\n    }\r\n\r\n    public SaveOrUpdateRecord = () => {\r\n        if (this.NewRecord) {\r\n            if (this.NewRecord.key.trim() != '') {\r\n                db.child('Records/' + this.NewRecord.key).set(new RecordWithoutKey(this.NewRecord));\r\n            }\r\n            else {\r\n                db.child('Records').push(new RecordWithoutKey(this.NewRecord));\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvar store = new RecordStore();\r\n(<any>window).rs = store;\r\nexport default store;","import React from \"react\";\r\nimport { Record } from '../model/Record'\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface ICardProp {\r\n    record: Record;\r\n}\r\n\r\nexport class Card extends React.Component<ICardProp> {\r\n\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <span>{this.props.record.Field1}</span>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-text\">{this.props.record.Field2}</p>\r\n                    <p className=\"card-text\">{this.props.record.Field3}</p>\r\n                    <p className=\"card-text\">{this.props.record.Field4}</p>\r\n                    <div>\r\n                        <button className=\"btn btn-outline-secondary btn-sm float-left\"><Link to={'/edit/'+this.props.record.key} >Edit</Link></button>\r\n                        <footer className=\"blockquote-footer text-right\">{this.props.record.category}</footer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { Record } from '../model/Record';\r\nimport CategoryStore from '../store/CategoryStore';\r\nimport RecordStore from '../store/RecordStore';\r\nimport { Card } from './Card';\r\nimport { observer } from 'mobx-react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\nexport interface HomeProps {\r\n}\r\n\r\ndeclare var $: any;\r\n\r\n@observer\r\nexport default class Home extends React.Component<HomeProps, any> {\r\n\r\n  private _record: Record;\r\n\r\n  constructor(props:HomeProps) {\r\n    super(props);\r\n\r\n    this.handleCategoryChange = this.handleCategoryChange.bind(this);\r\n    this.handleFilterChange = this.handleFilterChange.bind(this);\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-light bg-light navbar-expand-md\">\r\n          <span className=\"navbar-brand mb-0 h1\">Ray's App</span>\r\n          <input className=\"form-control ml-auto w-50\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" onChange={this.handleFilterChange}></input>\r\n          <button className=\"navbar-toggler ml-2\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarToggleExternalContent\" aria-controls=\"navbarToggleExternalContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarToggleExternalContent\">\r\n            <select id=\"selCategory\" className=\"form-control ml-2\" onChange={this.handleCategoryChange}>\r\n              <option>Select</option>\r\n              {CategoryStore.Categories.map(c => <option key={c.name} value={c.name}>{c.name}</option>)}\r\n            </select>\r\n            \r\n            <Link to='/add' className=\"form-control btn btn-outline-primary btn-block ml-2\">Add</Link>\r\n          </div>\r\n        </nav>\r\n\r\n        <main role=\"main\" className=\"container p-2\">\r\n          <div className=\"card-columns\">\r\n            {RecordStore.Records.map((r, i) => <Card key={r.key} record={r} ></Card>)}\r\n          </div>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  \r\n  handleFilterChange(event: any): void {\r\n    if (event && event.target) {\r\n      // this.setState({filterText:event.target.value});\r\n      RecordStore.RecordFilter = event.target.value;\r\n    }\r\n  }\r\n\r\n  handleCategoryChange(event: any): void {\r\n    if (event && event.target) {\r\n      RecordStore.Category = event.target.value;\r\n    }\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport RecordStore from '../store/RecordStore';\r\nimport { Record } from '../model/Record';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\r\n\r\nexport interface AddCardProps extends RouteComponentProps<any> {\r\n\r\n}\r\n\r\nexport default class AddCard extends React.Component<AddCardProps, any> {\r\n\r\n    private _record: Record;\r\n\r\n\r\n    constructor(props: AddCardProps) {\r\n        super(props);\r\n        this.handleAddSubmit = this.handleAddSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        let { id } = this.props.match.params;\r\n        if (id) {\r\n            this._record = RecordStore.getRecordByKey(id);\r\n        }\r\n        if (!this._record) {\r\n            this._record = new Record();\r\n        }\r\n    }\r\n\r\n    handleAddSubmit(event) {\r\n        if (this._record.key == '') {\r\n            this._record.category = RecordStore.Category;\r\n        }\r\n        if (this._record && this._record.category.trim().length > 1 && this._record.Field1.trim().length > 1) {\r\n            RecordStore.NewRecord = this._record;\r\n            RecordStore.SaveOrUpdateRecord();\r\n        } else {\r\n            alert(\"Invalid data, Nothing saved!\");\r\n        }\r\n\r\n        this.resetRecord();\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this._record[name] = value;\r\n    }\r\n\r\n    CloseButton = withRouter(({ history }) => (\r\n        <button\r\n            type='button' className=\"btn btn-outline-danger\"\r\n            onClick={() => {\r\n                this.resetRecord();\r\n                history.push('/');\r\n            }}\r\n        >Close</button>\r\n    ))\r\n\r\n    resetRecord() {\r\n        this._record = new Record();\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <form onSubmit={this.handleAddSubmit}>\r\n                <div className=\"card\">\r\n                    <h4 className=\"card-header\">{RecordStore.Category}</h4>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"txtField1\">Field1</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"txtField1\" name=\"Field1\" defaultValue={this._record.Field1} onChange={this.handleChange}></input>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"txtField2\">Field2</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"txtField2\" name=\"Field2\" defaultValue={this._record.Field2} onChange={this.handleChange}></input>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"txtField3\">Field3</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"txtField3\" name=\"Field3\" defaultValue={this._record.Field3} onChange={this.handleChange}></input>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"txtField4\">Field4</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"txtField4\" name=\"Field4\" defaultValue={this._record.Field4} onChange={this.handleChange}></input>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card-footer\">\r\n                        <button type=\"submit\" className=\"btn btn-primary btn-outline-success mr-2\">Save</button>\r\n                        <this.CloseButton></this.CloseButton>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Link, Route, withRouter } from 'react-router-dom';\r\nimport Home from './Home';\r\nimport { observer } from 'mobx-react';\r\nimport AddCard from './AddCard';\r\n\r\nexport interface MainProps {\r\n}\r\n\r\n@(withRouter as any)\r\n@observer\r\nexport default class Main extends React.Component<MainProps, any> {\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/add' component={AddCard} />\r\n        <Route path='/edit/:id' component={AddCard} />\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport Main from './components/Main';\r\n\r\nReactDOM.render((\r\n    <Router>\r\n        <Main />\r\n    </Router>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}